module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output playerAa[2],     // player A's binary a
    output playerAb[2],     // player A's binary b
    input playerAi[2],
    output playerBa[2],
    output playerBb[2],
    input playerBi[2],
    input playerAenter,
    input playerBenter,
    input start
  ) {
  
  sig rst;                  // reset signal
  sig aenter;
  sig st;
  var i;
  sig benter;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner playerAenterCond;
    button_conditioner startCond;
    button_conditioner playerBenterCond;
    edge_detector edge_detector(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector1(#RISE(1), #FALL(0)); // detect rising edges
    .rst(rst) {
      random_generator random_generator;
      dff aa[2];
      dff ab[2];
      dff ba[2];
      dff bb[2];
      dff aqueue[2];
      dff bqueue[2];
    }
    
  }
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    playerAenterCond.in = playerAenter;
    edge_detector.in = playerAenterCond.out;
    aenter = edge_detector.out;
    
    playerBenterCond.in = playerBenter;
    edge_detector1.in = playerBenterCond.out;
    benter = edge_detector1.out;
     
    
    startCond.in = start;
    st = startCond.out;
    
    if (st) {
      aqueue.d = 1;
      bqueue.d = 1;
      aa.d = random_generator.a;
      ab.d = random_generator.b;
      
      ba.d = random_generator.a;
      ba.d = random_generator.b;
    } else {
      aa.d =aa.q;
      ab.d = ab.q;
      
      ba.d = ba.q;
      bb.d = bb.q;
    }

    playerAa = aa.q;
    playerAb = ab.q;
    
    playerBa = ba.q;
    playerBb = bb.q;
    
    if (aenter) {
      if (playerAi == aa.q + ab.q) {
        aqueue.d = aqueue.q - 1;
        bqueue.d = bqueue.q + 1;
      } else {
        aqueue.d = aqueue.q+1;
      }
      aa.d = random_generator.a;
      ab.d = random_generator.b;
    } else if (benter) {
      if (playerBi == ba.q + bb.q) {
        aqueue.d = aqueue.q + 1;
        bqueue.d = bqueue.q - 1;
      } else {
        bqueue.d = bqueue.q+1;
      }
      ba.d = random_generator.a;
      bb.d = random_generator.b;
    }
    
    for (i = 0; i < aqueue.q; i++) {
      led[i] = 1; 
    }
    
    for (i = 0; i < bqueue.q; i++) {
      led[i + 4] = 1; 
    }
  }
}