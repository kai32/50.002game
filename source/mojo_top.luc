module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full
    output playerAa[4],     // player A's binary a
    output playerAb[4],     // player A's binary b
    input playerAi[4],
    output playerBa[4],
    output playerBb[4],
    input playerBi[4],
    input playerAenter,
    input playerBenter,
    input start,
    output playerAqueue[7],
    output playerBqueue[7]
  ) {
  
  sig rst;                  // reset signal
  sig aenter;
  sig st;
  var i;
  sig benter;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner playerAenterCond;
    button_conditioner startCond;
    button_conditioner playerBenterCond;
    edge_detector edge_detector(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector1(#RISE(1), #FALL(0)); // detect rising edges
    .rst(rst) {
      random_generator random_generator;
      dff aa[4];
      dff ab[4];
      dff ba[4];
      dff bb[4];
      dff aqueue[3];
      dff bqueue[3];
      fsm state = {IDLE, PLAY, AWIN, BWIN};
    }
    
  }
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    // show queue
    playerAqueue = 7b0;
    playerBqueue = 7b0;
    
    playerAenterCond.in = playerAenter;
    edge_detector.in = playerAenterCond.out;
    aenter = edge_detector.out;
    
    playerBenterCond.in = playerBenter;
    edge_detector1.in = playerBenterCond.out;
    benter = edge_detector1.out;
     
    
    startCond.in = start;
    st = startCond.out;
 
    playerAa = aa.q;
    playerAb = ab.q;
    
    playerBa = ba.q;
    playerBb = bb.q;
    
    //wina = 0;
    //winb = 0;
    
    
    case(state.q) {
      state.IDLE:
        if (st) {
          aqueue.d = 3;
          bqueue.d = 3;
          aa.d = random_generator.a;
          ab.d = random_generator.b;
          
          ba.d = random_generator.a;
          bb.d = random_generator.b;
          state.d = state.PLAY;
        }
      state.PLAY:
        aa.d =aa.q;
        ab.d = ab.q;
        
        ba.d = ba.q;
        bb.d = bb.q;
        
        if (aenter) {
          if (playerAi == aa.q + ab.q) {
            aqueue.d = aqueue.q - 1;
            bqueue.d = bqueue.q + 1;
          } else {
            aqueue.d = aqueue.q+1;
          }
          aa.d = random_generator.a;
          ab.d = random_generator.b;
        } else if (benter) {
          if (playerBi == ba.q + bb.q) {
            aqueue.d = aqueue.q + 1;
            bqueue.d = bqueue.q - 1;
          } else {
            bqueue.d = bqueue.q+1;
          }
          ba.d = random_generator.a;
          bb.d = random_generator.b;
        }
        
        //for (i = 0; i < aqueue.q; i++) {
        //  playerAqueue[i] = 1; 
        //}
        case(aqueue.q) {
          0: playerAqueue = 7b0000000;
          1: playerAqueue = 7b0000001;
          2: playerAqueue = 7b0000011;
          3: playerAqueue = 7b0000111;
          4: playerAqueue = 7b0001111;
          5: playerAqueue = 7b0011111;
          6: playerAqueue = 7b0111111;
          7: playerAqueue = 7b1111111;
          default: playerAqueue = 7b1111111;
        }
        case(bqueue.q) {
          0: playerBqueue = 7b0000000;
          1: playerBqueue = 7b0000001;
          2: playerBqueue = 7b0000011;
          3: playerBqueue = 7b0000111;
          4: playerBqueue = 7b0001111;
          5: playerBqueue = 7b0011111;
          6: playerBqueue = 7b0111111;
          7: playerBqueue = 7b1111111;
          default: playerBqueue = 7b1111111;
        }
        
        //for (i = 0; i < bqueue.q; i++) {
        //  playerBqueue[i] = 1; 
        //}
        if (aqueue.q == 7) {
          state.d = state.BWIN;
        } else if (bqueue.q == 7) {
          state.d = state.AWIN;
        }
        
     state.AWIN:
       playerAa = 4b1111;
       playerAb = 4b1111;
       playerBb = 4b0;
       playerBa = 4b0;
       playerAqueue = 7b0111110;
       if (st) {
        state.d = state.IDLE;
      }
     state.BWIN:
       //winb = 1;
       playerBa = 4b1111;
       playerBb = 4b1111;
       playerAb = 4b0;
       playerAa = 4b0;
       playerBqueue = 7b0111110;
       if (st) {
        state.d = state.IDLE;
      }
    }            
  }
}